{
    "Parameters": {
        "Environment": {
            "Description": "(*) Format: dev/test/${staging/prod}-${countryCode}",
            "Type": "String",
            "ConstraintDescription": "must select a valid environment.",
            "Default": "dev"
        },
        "EcsClusterName": {
            "Description": "(*) Specifies the ECS Cluster Name with which the resources would be associated.\nFormat: connnect-production-${countryCode}.",
            "Type": "String",
            "Default": "connect"
        },
        "EcsInstanceType": {
            "Description": "(*) Specifies the EC2 instance type for your container instances.\n",
            "Type": "CommaDelimitedList",
            "Default": "t2.micro",
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "KeyName": {
            "Description": "(*) Specifies the name of an existing Amazon EC2 key pair to enable SSH access to the EC2 instances in your cluster.\nFormat: connect-deploy-prod-${countryCode}.",
            "Type": "String",
            "Default": "web"
        },
        "AsgMaxSize": {
            "Description": "(*) Specifies the number of instances to launch and register to the cluster. Defaults to 2.",
            "Type": "Number",
            "Default": "2"
        },
        "ServiceMaximumPercent": {
            "Description": "Specifies the maximumPercent of service.",
            "Type": "Number",
            "Default": "100"
        },
        "ServiceMinimumPercent": {
            "Description": "Specifies the minimumPercent of service.",
            "Type": "Number",
            "Default": "50"
        },
        "ServiceBackendMemory": {
            "Description": "Specifies the memory for backend service.",
            "Type": "Number",
            "Default": "900"
        },
        "EbsVolumeSize": {
            "Description": "Optional - Specifies the Size in GBs, of the newly created Amazon Elastic Block Store (Amazon EBS) volume.",
            "Type": "Number",
            "Default": "22"
        },
        "EbsVolumeType": {
            "Description": "Optional - Specifies the Type of (Amazon EBS) volume.",
            "Type": "String",
            "Default": "gp2",
            "AllowedValues": ["", "standard", "io1", "gp2", "sc1", "st1"],
            "ConstraintDescription": "Must be a valid EC2 volume type."
        },
        "DeviceName": {
            "Description": "Optional - Specifies the device mapping for the Volume.",
            "Type": "String",
            "Default": "/dev/xvdcz"
        },
        "BackendNodeEnv": {
            "Description": "(*) Specify backend node environment.",
            "Type": "String",
            "Default": "production",
            "AllowedValues": ["staging", "production"]
        }
    },
    "Mappings": {
        "SubnetConfig": {
            "VPC": {
                "CIDR": "192.168.0.0/22"
            },
            "Public1": {
                "CIDR": "192.168.0.0/24"
            },
            "Public2": {
                "CIDR": "192.168.1.0/24"
            },
            "Private1": {
                "CIDR": "192.168.2.0/24"
            },
            "Private2": {
                "CIDR": "192.168.3.0/24"
            }
        },
        "AWSRegionToAMI": {
            "us-east-1": {
                "AMIID": "ami-0fe5f366c083f59ca"
            },
            "us-east-2": {
                "AMIID": "ami-04474aeb33af328e7"
            },
            "us-west-1": {
                "AMIID": "ami-04dda3eb78d3c76f9"
            },
            "us-west-2": {
                "AMIID": "ami-00b9dff790e659df2"
            },
            "eu-west-1": {
                "AMIID": "ami-08c011700cf146b89"
            },
            "eu-central-1": {
                "AMIID": "ami-0fab44817c875e415"
            },
            "ap-northeast-1": {
                "AMIID": "ami-0fcfb0266308303f6"
            },
            "ap-southeast-1": {
                "AMIID": "ami-0b91f3efad17de577"
            },
            "ap-southeast-2": {
                "AMIID": "ami-016dfbb93297168e3"
            }
        }
    },
    "Conditions": {
        "CreateEC2LCWithKeyPair": {
            "Fn::Not": [{
                "Fn::Equals": [{
                        "Ref": "KeyName"
                    },
                    ""
                ]
            }]
        }
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Fn::FindInMap": ["SubnetConfig", "VPC", "CIDR"]
                },
                "EnableDnsSupport": true,
                "EnableDnsHostnames": true,
                "InstanceTenancy": "default",
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Ref": "AWS::StackName"
                    }
                }]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Ref": "AWS::StackName"
                    }
                }]
            }
        },
        "GatewayToInternet": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": {
                    "Fn::FindInMap": ["SubnetConfig", "Public1", "CIDR"]
                },
                "MapPublicIpOnLaunch": true,
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [{
                        "Key": "Name",
                        "Value": "Public subnet 1"
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },
        "PrivateSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": {
                    "Fn::FindInMap": ["SubnetConfig", "Private1", "CIDR"]
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [{
                        "Key": "Name",
                        "Value": "Private subnet 1"
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },
        "PublicSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": {
                    "Fn::FindInMap": ["SubnetConfig", "Public2", "CIDR"]
                },
                "MapPublicIpOnLaunch": true,
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [{
                        "Key": "Name",
                        "Value": "Public subnet 2"
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },
        "PrivateSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": {
                    "Fn::FindInMap": ["SubnetConfig", "Private2", "CIDR"]
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [{
                        "Key": "Name",
                        "Value": "Private subnet 2"
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },
        "PublicRoute1": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "Public 1"
                }]
            }
        },
        "PrivateRoute1": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "Private 1"
                }]
            }
        },
        "PublicRoute2": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "Public 2"
                }]
            }
        },
        "PrivateRoute2": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "Private 2"
                }]
            }
        },
        "PublicRouteTableAssociation1": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                },
                "RouteTableId": {
                    "Ref": "PublicRoute1"
                }
            }
        },
        "PrivateRouteTableAssociation1": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnet1"
                },
                "RouteTableId": {
                    "Ref": "PrivateRoute1"
                }
            }
        },
        "PublicRouteTableAssociation2": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet2"
                },
                "RouteTableId": {
                    "Ref": "PublicRoute2"
                }
            }
        },
        "PrivateRouteTableAssociation2": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnet2"
                },
                "RouteTableId": {
                    "Ref": "PrivateRoute2"
                }
            }
        },
        "PublicRoute1InternetRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "GatewayToInternet",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRoute1"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicRoute2InternetRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "GatewayToInternet",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRoute2"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "NetworkAclPublic": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [{
                    "Key": "Network",
                    "Value": "Public"
                }]
            }
        },
        "NetworkAclPrivate": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [{
                    "Key": "Network",
                    "Value": "Private"
                }]
            }
        },
        "PublicSubnetNetworkAclAssociation1": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                },
                "NetworkAclId": {
                    "Ref": "NetworkAclPublic"
                }
            }
        },
        "PrivateSubnetNetworkAclAssociation1": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnet1"
                },
                "NetworkAclId": {
                    "Ref": "NetworkAclPrivate"
                }
            }
        },
        "PublicSubnetNetworkAclAssociation2": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet2"
                },
                "NetworkAclId": {
                    "Ref": "NetworkAclPublic"
                }
            }
        },
        "PrivateSubnetNetworkAclAssociation2Private": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnet2"
                },
                "NetworkAclId": {
                    "Ref": "NetworkAclPrivate"
                }
            }
        },
        "NetworkAclEntryInPublicAllowAll": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAclPublic"
                },
                "RuleNumber": 100,
                "Protocol": -1,
                "RuleAction": "allow",
                "Egress": false,
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "NetworkAclEntryOutPublicAllowAll": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAclPublic"
                },
                "RuleNumber": 100,
                "Protocol": -1,
                "RuleAction": "allow",
                "Egress": true,
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "NetworkAclEntryInPrivateAllowVPC": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAclPrivate"
                },
                "RuleNumber": 100,
                "Protocol": -1,
                "RuleAction": "allow",
                "Egress": false,
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "NetworkAclEntryOutPrivateAllowVPC": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAclPrivate"
                },
                "RuleNumber": 100,
                "Protocol": -1,
                "RuleAction": "allow",
                "Egress": true,
                "CidrBlock": "0.0.0.0/0"
            }
        },
        "NATGateway": {
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": ["NATGatewayEIP", "AllocationId"]
                },
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Ref": "AWS::StackName"
                    }
                }]
            }
        },
        "NATGatewayEIP": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "RouteNATGateway1": {
            "DependsOn": ["NATGateway"],
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRoute1"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NATGateway"
                }
            }
        },
        "RouteNATGateway2": {
            "DependsOn": ["NATGateway"],
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRoute2"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NATGateway"
                }
            }
        },
        "ECSCluster": {
            "Type": "AWS::ECS::Cluster",
            "Properties": {
                "ClusterName": {
                    "Fn::Sub": "${EcsClusterName}-${Environment}"
                }
            }
        },
        "ALBEC2SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "DependsOn": "VPC",
            "Properties": {
                "GroupDescription": "ALB security access",
                "SecurityGroupIngress": [{
                        "IpProtocol": "tcp",
                        "FromPort": 80,
                        "ToPort": 80,
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 443,
                        "ToPort": 443,
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 3000,
                        "ToPort": 3000,
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "EcsSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "DependsOn": "VPC",
            "Properties": {
                "GroupDescription": "ECS Allowed Ports",
                "VpcId": {
                    "Ref": "VPC"
                },

                "SecurityGroupIngress": [{
                        "IpProtocol": "tcp",
                        "FromPort": "0",
                        "ToPort": "65535",
                        "SourceSecurityGroupId": {
                            "Ref": "ALBEC2SecurityGroup"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "RoleProfile": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": ["ec2.amazonaws.com"]
                        },
                        "Action": "sts:AssumeRole"
                    }]
                },
                "Path": "/",
                "Policies": [{
                    "PolicyName": "AWS-Instance-Profile",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "ec2:DescribeTags",
                                "ecs:CreateCluster",
                                "ecs:DeregisterContainerInstance",
                                "ecs:DiscoverPollEndpoint",
                                "ecs:Poll",
                                "ecs:RegisterContainerInstance",
                                "ecs:StartTelemetrySession",
                                "ecs:UpdateContainerInstancesState",
                                "ecs:Submit*",
                                "ecr:GetAuthorizationToken",
                                "ecr:BatchCheckLayerAvailability",
                                "ecr:GetDownloadUrlForLayer",
                                "ecr:BatchGetImage",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": "*"
                        }]
                    }
                }]
            }
        },
        "InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [{
                    "Ref": "RoleProfile"
                }]
            }
        },
        "EcsInstanceLaunchTemplate": {
            "Type": "AWS::EC2::LaunchTemplate",
            "DependsOn": "VPC",
            "Properties": {
                "LaunchTemplateData": {
                    "NetworkInterfaces": [{
                        "DeviceIndex": 0,
                        "AssociatePublicIpAddress": true,
                        "Groups": [{
                            "Ref": "EcsSecurityGroup"
                        }]
                    }],
                    "ImageId": {
                        "Fn::FindInMap": [
                            "AWSRegionToAMI",
                            {
                                "Ref": "AWS::Region"
                            },
                            "AMIID"
                        ]
                    },
                    "InstanceType": {
                        "Fn::Select": [
                            0,
                            {
                                "Ref": "EcsInstanceType"
                            }
                        ]
                    },
                    "IamInstanceProfile": {
                        "Arn": {
                            "Fn::GetAtt": ["InstanceProfile", "Arn"]
                        }
                    },
                    "KeyName": {
                        "Fn::If": [
                            "CreateEC2LCWithKeyPair",
                            {
                                "Ref": "KeyName"
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    "BlockDeviceMappings": [{
                        "DeviceName": {
                            "Ref": "DeviceName"
                        },
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "EbsVolumeSize"
                            },
                            "VolumeType": {
                                "Ref": "EbsVolumeType"
                            }
                        }
                    }],
                    "UserData": {
                        "Fn::Base64": {
                            "Fn::Join": [
                                "",
                                [
                                    "#!/bin/bash -xe\n",
                                    "echo ECS_CLUSTER=",
                                    {
                                        "Ref": "ECSCluster"
                                    },
                                    " >> /etc/ecs/ecs.config\n",
                                    "yum install -y aws-cfn-bootstrap\n",
                                    "/opt/aws/bin/cfn-init -v ",
                                    "         --stack ",
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "         --resource EcsInstanceLaunchTemplate ",
                                    "         --region ",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    "\n",
                                    "/opt/aws/bin/cfn-signal -e $? ",
                                    "         --stack ",
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "         --resource ECSAutoScalingGroup ",
                                    "         --region ",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    "\n"
                                ]
                            ]
                        }
                    }
                }
            }
        },
        "EcsInstanceAsg": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "DependsOn": ["VPC", "PublicSubnet1", "PublicSubnet2"],
            "Properties": {
                "VPCZoneIdentifier": [{
                        "Ref": "PublicSubnet1"
                    },
                    {
                        "Ref": "PublicSubnet2"
                    }
                ],
                "LaunchTemplate": {
                    "LaunchTemplateId": {
                        "Ref": "EcsInstanceLaunchTemplate"
                    },
                    "Version": {
                        "Fn::GetAtt": ["EcsInstanceLaunchTemplate", "LatestVersionNumber"]
                    }
                },
                "MinSize": "0",
                "MaxSize": {
                    "Ref": "AsgMaxSize"
                },
                "DesiredCapacity": {
                    "Ref": "AsgMaxSize"
                },
                "Tags": [{
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "ECS Instance - ${AWS::StackName}"
                        },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "Description",
                        "Value": "This instance is the part of the Auto Scaling group which was created through ECS Console",
                        "PropagateAtLaunch": "true"
                    }
                ]
            }
        },
        "ApplicationLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "DependsOn": ["VPC", "EcsInstanceAsg"],
            "Properties": {
                "Subnets": [{
                    "Ref": "PublicSubnet1"
                }, {
                    "Ref": "PublicSubnet2"
                }],
                "SecurityGroups": [{
                    "Ref": "ALBEC2SecurityGroup"
                }]
            }
        },
        "ALBListenerBackend": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "DependsOn": "ALBTargetGroupBackend",
            "Properties": {
                "DefaultActions": [{
                    "Type": "forward",
                    "TargetGroupArn": {
                        "Ref": "ALBTargetGroupBackend"
                    }
                }],
                "LoadBalancerArn": {
                    "Ref": "ApplicationLoadBalancer"
                },
                "Port": "3000",
                "Protocol": "HTTP"
            }
        },
        "ALBTargetGroupBackend": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "DependsOn": "VPC",
            "Properties": {
                "HealthCheckIntervalSeconds": 30,
                "HealthCheckTimeoutSeconds": 5,
                "HealthyThresholdCount": 3,
                "HealthCheckPath": "/",
                "Port": 3000,
                "Protocol": "HTTP",
                "UnhealthyThresholdCount": 5,
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "LogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": {
                    "Fn::Sub": "/ecs/connect-${Environment}/"
                },
                "RetentionInDays": 180
            }
        },
        "TaskdefinitionBackend": {
            "Type": "AWS::ECS::TaskDefinition",
            "DependsOn": "LogGroup",
            "Properties": {
                "Family": {
                    "Fn::Sub": "connect-backend-${Environment}"
                },
                "ContainerDefinitions": [{
                    "Name": "backend",
                    "Image": {
                        "Fn::Sub": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/connect-backend-${Environment}"
                    },
                    "PortMappings": [{
                        "ContainerPort": "3000",
                        "HostPort": "0"
                    }],
                    "Memory": {
                        "Ref": "ServiceBackendMemory"
                    },
                    "Essential": "true",
                    "LogConfiguration": {
                        "LogDriver": "awslogs",
                        "Options": {
                            "awslogs-group": {
                                "Ref": "LogGroup"
                            },
                            "awslogs-region": {
                                "Ref": "AWS::Region"
                            },
                            "awslogs-stream-prefix": "ecs"
                        }
                    }
                }]
            }
        },
        "BackendService": {
            "Type": "AWS::ECS::Service",
            "DependsOn": ["EcsInstanceAsg", "ALBListenerBackend"],
            "Properties": {
                "ServiceName": {
                    "Fn::Sub": "connect-backend-service-${Environment}"
                },
                "Cluster": {
                    "Ref": "ECSCluster"
                },
                "DesiredCount": {
                    "Ref": "AsgMaxSize"
                },
                "TaskDefinition": {
                    "Ref": "TaskdefinitionBackend"
                },
                "LoadBalancers": [{
                    "TargetGroupArn": {
                        "Ref": "ALBTargetGroupBackend"
                    },
                    "ContainerPort": "3000",
                    "ContainerName": "backend"
                }],
                "HealthCheckGracePeriodSeconds": 60,
                "DeploymentConfiguration": {
                    "MaximumPercent": {
                        "Ref": "ServiceMaximumPercent"
                    },
                    "MinimumHealthyPercent": {
                        "Ref": "ServiceMinimumPercent"
                    }
                }
            }
        }
    }
}
